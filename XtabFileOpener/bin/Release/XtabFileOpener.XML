<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XtabFileOpener</name>
    </assembly>
    <members>
        <member name="T:XtabFileOpener.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:XtabFileOpener.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:XtabFileOpener.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:XtabFileOpener.Properties.Resources.TestFile">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="T:XtabFileOpener.Runner">
            <summary>
            runs the whole xtabOpener-program by containing a main-method
            </summary>
        </member>
        <member name="M:XtabFileOpener.Runner.Main(System.String[])">
            <summary>
            tries to open the file with the path at the first position in the argument array
            </summary>
            <param name="args">
            array with the path of the xtab-file at the first position
            </param>
        </member>
        <member name="T:XtabFileOpener.Spreadsheet.SpreadsheetAdapter.ExcelAdapter">
            <summary>
            allows interacting with Excel
            </summary>
        </member>
        <member name="M:XtabFileOpener.Spreadsheet.SpreadsheetAdapter.ExcelAdapter.waitForRealClosing">
            <summary>
            waits until the Excel workbook is really closed 
            (when the WorkbookDeactivate-event is fired, the application is not yet closed completely)
            </summary>
        </member>
        <member name="T:XtabFileOpener.Spreadsheet.SpreadsheetAdapter.applyChanges">
            <summary>
            delegate that can be called when a spreadsheet was changed
            </summary>
            <param name="tableContainer">TableContainer with the whole data</param>
        </member>
        <member name="T:XtabFileOpener.Spreadsheet.SpreadsheetAdapter.spreadsheetClosed">
            <summary>
            delegate that can be called when the spreadsheet is closed
            </summary>
        </member>
        <member name="T:XtabFileOpener.Spreadsheet.SpreadsheetAdapter.SpreadsheetAdapter">
            <summary>
            describes the composition of a class that allows interacting with a spreadsheet
            </summary>
        </member>
        <member name="E:XtabFileOpener.Spreadsheet.SpreadsheetAdapter.SpreadsheetAdapter.save">
            <summary>
            event that is raised when the spreadsheet is saved
            </summary>
        </member>
        <member name="E:XtabFileOpener.Spreadsheet.SpreadsheetAdapter.SpreadsheetAdapter.closed">
            <summary>
            event that is raised when the spreadsheet is closed
            </summary>
        </member>
        <member name="M:XtabFileOpener.Spreadsheet.SpreadsheetAdapter.SpreadsheetAdapter.createSpreadsheet(System.String)">
            <summary>
            creates a new spreadsheet
            </summary>
            <param name="name">name of the spreadsheet</param>
        </member>
        <member name="M:XtabFileOpener.Spreadsheet.SpreadsheetAdapter.SpreadsheetAdapter.closeSpreadsheet">
            <summary>
            closes the spreadsheet
            </summary>
        </member>
        <member name="M:XtabFileOpener.Spreadsheet.SpreadsheetAdapter.SpreadsheetAdapter.destroySpreadsheet">
            <summary>
            destroys the spreadsheet permanently
            </summary>
        </member>
        <member name="M:XtabFileOpener.Spreadsheet.SpreadsheetAdapter.SpreadsheetAdapter.saveSpreadsheet">
            <summary>
            saves the spreadsheet to a file
            </summary>
        </member>
        <member name="M:XtabFileOpener.Spreadsheet.SpreadsheetAdapter.SpreadsheetAdapter.startListeningToSaving">
            <summary>
            starts listening to the the workbook being saved
            </summary>
        </member>
        <member name="M:XtabFileOpener.Spreadsheet.SpreadsheetAdapter.SpreadsheetAdapter.startListeningToClosing">
            <summary>
            starts listening to the workbook being closed
            </summary>
        </member>
        <member name="M:XtabFileOpener.Spreadsheet.SpreadsheetAdapter.SpreadsheetAdapter.show">
            <summary>
            sets the workbook visible to the user
            </summary>
        </member>
        <member name="P:XtabFileOpener.Spreadsheet.SpreadsheetAdapter.SpreadsheetAdapter.SheetCount">
            <summary>
            number of sheets in this spreadsheet
            </summary>
        </member>
        <member name="M:XtabFileOpener.Spreadsheet.SpreadsheetAdapter.SpreadsheetAdapter.addSheetBehind(System.String)">
            <summary>
            adds a new sheet to the workbook
            </summary>
            <param name="name">name of the new sheet</param>
            <returns>number of the new sheet, beginning at 0</returns>
        </member>
        <member name="M:XtabFileOpener.Spreadsheet.SpreadsheetAdapter.SpreadsheetAdapter.setContentOfSheet(System.Int32,System.Object[0:,0:],System.Boolean)">
            <summary>
            sets the content of a sheet in the workbook; if the sheet is not empty, all concerned cells are overridden
            </summary>
            <param name="number">number of the sheet, beginning at 0</param>
            <param name="content">new content of the sheet</param>
            <param name="autosizeColumns">whether the columns in the sheet should adapt their width to the new content</param>
        </member>
        <member name="M:XtabFileOpener.Spreadsheet.SpreadsheetAdapter.SpreadsheetAdapter.deleteSheet(System.Int32)">
            <summary>
            deletes a sheet
            </summary>
            <param name="number">number of the sheet that should be deleted, beginning at 0</param>
        </member>
        <member name="M:XtabFileOpener.Spreadsheet.SpreadsheetAdapter.SpreadsheetAdapter.activateSheet(System.Int32)">
            <summary>
            sets a sheet to the active one
            </summary>
            <param name="number">number of the sheet that should be activated, beginning at 0</param>
        </member>
        <member name="M:XtabFileOpener.Spreadsheet.SpreadsheetAdapter.SpreadsheetAdapter.renameSheet(System.Int32,System.String)">
            <summary>
            renames a sheet in the workbook
            </summary>
            <param name="number">number of the sheet, that should be renamed</param>
            <param name="name">new name of the sheet</param>
        </member>
        <member name="P:XtabFileOpener.Spreadsheet.SpreadsheetAdapter.SpreadsheetAdapter.tableContainer">
            <summary>
            TableContainer that represents this spreadsheet
            </summary>
        </member>
        <member name="M:XtabFileOpener.Spreadsheet.SpreadsheetAdapter.SpreadsheetAdapter.createTableContainer">
            <summary>
            creates the TableContainer
            </summary>
        </member>
        <member name="T:XtabFileOpener.Spreadsheet.SpreadsheetHandler">
            <summary>
            enables open the tables with a program that can show and edit tables
            </summary>
        </member>
        <member name="M:XtabFileOpener.Spreadsheet.SpreadsheetHandler.waitForClosing">
            <summary>
            lets the current thread wait until the Excel workbook is closed
            </summary>
        </member>
        <member name="T:XtabFileOpener.TableContainer.Table">
            <summary>
            represents a database tables
            </summary>
        </member>
        <member name="F:XtabFileOpener.TableContainer.Table.tableArray">
            <summary>
            one based array with the whole content of the table, including columns
            </summary>
        </member>
        <member name="P:XtabFileOpener.TableContainer.Table.firstRowContainsColumnNames">
            <summary>
            defines whether the first row in tableArray contains the column names
            </summary>
        </member>
        <member name="P:XtabFileOpener.TableContainer.Table.Width">
            <summary>
            number of columns of the table
            </summary>
        </member>
        <member name="P:XtabFileOpener.TableContainer.Table.Height">
            <summary>
            number of rows of the table including the row with the column names
            </summary>
        </member>
        <member name="P:XtabFileOpener.TableContainer.Table.TableArray">
            <summary>
            get an array with one-based indexing
            </summary>
            <returns></returns>
        </member>
        <member name="P:XtabFileOpener.TableContainer.Table.Empty">
            <summary>
            checks whether the table is empty
            </summary>
        </member>
        <member name="T:XtabFileOpener.TableContainer.TableContainer">
            <summary>
            Represents a container of database tables; the container is not static, that means it only contains references on tables.
            the consequence is that iterating over the tables at different times can yield different tables
            </summary>
        </member>
        <member name="M:XtabFileOpener.TableContainer.TableContainer.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            enables iterating over the tables of this container
            </summary>
            <returns></returns>
        </member>
        <member name="P:XtabFileOpener.TableContainer.TableContainer.Count">
            <summary>
            number of the tables
            </summary>
        </member>
        <member name="T:XtabFileOpener.TableContainer.ListTableContainer.Array2D">
            <summary>
            contains static methods that are useful for handling with two dimensional arrays
            </summary>
        </member>
        <member name="M:XtabFileOpener.TableContainer.ListTableContainer.Array2D.changeArraySize``1(``0[0:,0:],System.Int32,System.Int32)">
            <summary>
            creates a new array from an exisiting array with new dimensions
            </summary>
            <param name="array">old array</param>
            <param name="height">new height</param>
            <param name="width">new width</param>
            <returns>new array</returns>
        </member>
        <member name="M:XtabFileOpener.TableContainer.ListTableContainer.Array2D.addRowToArray``1(``0[0:,0:],``0[])">
            <summary>
            creates a new array from an existing array, that has one more row
            </summary>
            <param name="array">old array</param>
            <param name="row">row that should be added</param>
            <returns>new array</returns>
        </member>
        <member name="M:XtabFileOpener.TableContainer.ListTableContainer.Array2D.addArrayToArray``1(``0[0:,0:],``0[0:,0:])">
            <summary>
            creates a new array of two exisiting arrays 
            </summary>
            <typeparam name="T">Type of the arrays</typeparam>
            <param name="arr1"></param>
            <param name="arr2"></param>
            <returns>array containing both arrays</returns>
        </member>
        <member name="T:XtabFileOpener.TableContainer.ListTableContainer.ListTableContainer">
            <summary>
            TableContainer that manages its tables using lists
            </summary>
        </member>
        <member name="M:XtabFileOpener.TableContainer.ListTableContainer.ListTableContainer.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String[0:,0:]}})">
            <summary>
            </summary>
            <param name="_name">name of the TableContainer</param>
            <param name="_tables">tables of the TableContainer</param>
        </member>
        <member name="T:XtabFileOpener.TableContainer.SpreadsheetTableContainer.ExcelTableContainer.ExcelTable">
            <summary>
            Implementation of Table, that manages an Excel table
            </summary>
        </member>
        <member name="T:XtabFileOpener.TableContainer.SpreadsheetTableContainer.ExcelTableContainer.ExcelTableContainer">
            <summary>
            Implementation of TableContainer, that contains Excel database tables
            </summary>
        </member>
        <member name="T:XtabFileOpener.TableContainer.XmlTableContainer.XmlTable">
            <summary>
            Implementation of Table, that manages an XML-based table
            </summary>
        </member>
        <member name="T:XtabFileOpener.TableContainer.XmlTableContainer.XmlTableContainer">
            <summary>
            Implementation of TableContainer, that contains XML database tables 
            </summary>
        </member>
        <member name="T:XtabFileOpener.XtabFile.XtabFile">
            <summary>
            represents an xtab-file and provides methods to work with it
            </summary>
        </member>
        <member name="P:XtabFileOpener.XtabFile.XtabFile.TableContainer">
            <summary>
            TableContainer, that corresponds to the xtab-file
            </summary>
        </member>
        <member name="T:XtabFileOpener.XtabFile.XtabFormat">
            <summary>
            contains constants, which are names of XML-elements of an xtab-file
            </summary>
        </member>
        <member name="F:XtabFileOpener.XtabFile.XtabFormat.head">
            <summary>
            first line of the xtab file
            </summary>
        </member>
        <member name="T:XtabFileOpener.XtabFileOpener">
            <summary>
            enables opening an xtab-file
            </summary>
        </member>
        <member name="M:XtabFileOpener.XtabFileOpener.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="fullFileName">full file-name of the xtab-file</param>
        </member>
        <member name="M:XtabFileOpener.XtabFileOpener.openFile(XtabFileOpener.Spreadsheet.SpreadsheetAdapter.SpreadsheetAdapter)">
            <summary>
            tries to open the initialized xtab-file
            </summary>
            <param name="spreadsheetAdapter">SpreadsheetAdapter, that the xtab-file should be opened with</param>
        </member>
        <member name="M:XtabFileOpener.XtabFileOpener.waitForClosing">
            <summary>
            waits for the xtab editor being closed by the user
            </summary>
        </member>
    </members>
</doc>
